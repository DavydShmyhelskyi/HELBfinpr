// <auto-generated />
using System;
using FnPrDotnet;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(LnContext))]
    partial class LnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FnPrDotnet.Result", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("finishTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("resultPercent")
                        .HasColumnType("float");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("testId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FnPrDotnet.Term", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("termTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("termTypeId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("FnPrDotnet.TermType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TermTypes");
                });

            modelBuilder.Entity("FnPrDotnet.Test", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("TestTypeid")
                        .HasColumnType("int");

                    b.Property<int>("WordListid")
                        .HasColumnType("int");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TestTypeid");

                    b.HasIndex("WordListid");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("FnPrDotnet.TestType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("FnPrDotnet.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userStatusId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FnPrDotnet.UserDictionary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("UserDictionaryStatusid")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastTestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.Property<int>("termId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserDictionaryStatusid");

                    b.HasIndex("termId");

                    b.ToTable("UserDictionarys");
                });

            modelBuilder.Entity("FnPrDotnet.UserDictionaryStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserDictionaryStatuses");
                });

            modelBuilder.Entity("FnPrDotnet.UserStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("FnPrDotnet.WordList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("createdBy");

                    b.ToTable("WordList");
                });

            modelBuilder.Entity("UserDictionaryWordList", b =>
                {
                    b.Property<int>("UserDictionaryid")
                        .HasColumnType("int");

                    b.Property<int>("WordListid")
                        .HasColumnType("int");

                    b.HasKey("UserDictionaryid", "WordListid");

                    b.HasIndex("WordListid");

                    b.ToTable("UserDictionaryWordList");
                });

            modelBuilder.Entity("FnPrDotnet.Result", b =>
                {
                    b.HasOne("FnPrDotnet.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("FnPrDotnet.Term", b =>
                {
                    b.HasOne("FnPrDotnet.TermType", "TermType")
                        .WithMany("terms")
                        .HasForeignKey("termTypeId")
                        .IsRequired();

                    b.Navigation("TermType");
                });

            modelBuilder.Entity("FnPrDotnet.Test", b =>
                {
                    b.HasOne("FnPrDotnet.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FnPrDotnet.WordList", "WordList")
                        .WithMany()
                        .HasForeignKey("WordListid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");

                    b.Navigation("WordList");
                });

            modelBuilder.Entity("FnPrDotnet.User", b =>
                {
                    b.HasOne("FnPrDotnet.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("userStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("FnPrDotnet.UserDictionary", b =>
                {
                    b.HasOne("FnPrDotnet.UserDictionaryStatus", "UserDictionaryStatus")
                        .WithMany("UserDictionaries")
                        .HasForeignKey("UserDictionaryStatusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FnPrDotnet.Term", "Term")
                        .WithMany("UserDictionaries")
                        .HasForeignKey("termId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");

                    b.Navigation("UserDictionaryStatus");
                });

            modelBuilder.Entity("FnPrDotnet.WordList", b =>
                {
                    b.HasOne("FnPrDotnet.User", "user")
                        .WithMany("WordList")
                        .HasForeignKey("createdBy")
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("UserDictionaryWordList", b =>
                {
                    b.HasOne("FnPrDotnet.UserDictionary", null)
                        .WithMany()
                        .HasForeignKey("UserDictionaryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FnPrDotnet.WordList", null)
                        .WithMany()
                        .HasForeignKey("WordListid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FnPrDotnet.Term", b =>
                {
                    b.Navigation("UserDictionaries");
                });

            modelBuilder.Entity("FnPrDotnet.TermType", b =>
                {
                    b.Navigation("terms");
                });

            modelBuilder.Entity("FnPrDotnet.Test", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("FnPrDotnet.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("FnPrDotnet.User", b =>
                {
                    b.Navigation("WordList");
                });

            modelBuilder.Entity("FnPrDotnet.UserDictionaryStatus", b =>
                {
                    b.Navigation("UserDictionaries");
                });

            modelBuilder.Entity("FnPrDotnet.UserStatus", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
